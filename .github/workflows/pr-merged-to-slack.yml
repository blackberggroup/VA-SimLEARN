name: "Upload changed files & post link to Slack on PR merge"

on:
  pull_request:
    types: [closed]

jobs:
  upload-and-post-link:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true }}

    steps:
      - name: Check out code at the merge commit
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Ensure we can compare HEAD to HEAD^
          ref: ${{ github.sha }}

      - name: Identify changed files
        id: diff
        run: |
          # Get the changed files between the merge commit (HEAD) and the previous commit (HEAD^)
          CHANGED_FILES=$(git diff HEAD^ HEAD --name-only)

          echo "Changed files detected:"
          echo "$CHANGED_FILES"

          # Convert newlines to spaces for safe output storage
          CHANGED_FILES_SINGLE_LINE=$(echo "$CHANGED_FILES" | tr '\n' ' ')

          echo "CHANGED_FILES=$CHANGED_FILES_SINGLE_LINE" >> $GITHUB_OUTPUT

      - name: Zip the changed files
        run: |
          CHANGED_FILES="${{ steps.diff.outputs.CHANGED_FILES }}"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No changed files found. Exiting..."
            exit 0
          fi
          
          zip changed-files.zip $CHANGED_FILES

      - name: Upload ZIP to Slack
        id: upload_to_slack
        run: |
          # Ensure jq is available (often pre-installed on ubuntu-latest, but let's be safe):
          sudo apt-get update && sudo apt-get install -y jq

          # Upload the file to Slack
          # (No initial_comment here, since we want to post a *follow-up* message with the final link)
          response=$(curl -s -F file=@changed-files.zip \
                              -F "channels=${{ secrets.SLACK_CHANNEL_ID }}" \
                              -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
                              https://slack.com/api/files.upload)

          # Extract the 'permalink' from the JSON response
          permalink=$(echo "$response" | jq -r '.file.permalink')

          # If 'permalink' is null or empty, something went wrong
          if [ "$permalink" = "null" ] || [ -z "$permalink" ]; then
            echo "Error uploading file to Slack. Full response:"
            echo "$response"
            exit 1
          fi

          # Save the permalink for the next step
          echo "FILE_PERMALINK=$permalink" >> $GITHUB_OUTPUT

      - name: Post success message with ZIP link
        run: |
          permalink="${{ steps.upload_to_slack.outputs.FILE_PERMALINK }}"

          # Slack message text
          message="Success! Merge complete. Here are your files: $permalink"

          # Post the message to the same channel
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H "Content-type: application/json" \
            --data "{\"channel\":\"${{ secrets.SLACK_CHANNEL_ID }}\",\"text\":\"${message}\"}" \
            https://slack.com/api/chat.postMessage
